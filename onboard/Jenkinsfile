pipeline {
    agent {
        kubernetes {
           label "jenkins-onboarding-${UUID.randomUUID().toString()}"
           yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: onboarding
spec:
  containers:
  - name: gcloud-container
    image: containerci/gcloud-container:latest
    imagePullPolicy: Never
    tty: true
    command: ["cat"]
"""
		}
    }
    environment {
        orgName="${params.orgName}"
        teamName="${params.teamName}"
        jenkinsUrl="${params.teamName}.${params.jenkinsUrlPrefix}"
        repoConfig="${params.teamName}-jenkins-config"
        namespace="${params.teamName}-${params.costCenter}"
        cluster="${params.cluster}"
        tokenAuth="${params.gheTokenCreds}"
        region="${params.region}"
        project="${params.project}"
    }
    stages {
        stage("GHE Login") { 
            steps {
                script { 
                    container("gcloud-container") { 
                        withCredentials([string(credentialsId: tokenAuth, variable: 'TOKEN')]) {
                            sh """
                                    echo ${TOKEN} > /tmp/token.txt
                                    gh auth login --with-token < /tmp/token.txt
                            """
                        }

                    }
                }
            }
        }
        stage("Create jenkins config") { 
            steps {
                script { 
                    container("gcloud-container") { 
                        sh """
                            git config --global user.name "svcaccount"
                            git config --global user.email "svcaccount"
                        """
                        withCredentials([usernamePassword(credentialsId: 'github_personal', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        def originUrl = "https://$USERNAME:$PASSWORD@github.com/$orgName/$repoConfig.git"
                        sh """
                            #!/bin/bash -vx
                            rm -rf ${WORKSPACE}/.git
                            gh repo view $orgName/$repoConfig || export exitcode=\$?
                            if [ \$exitcode -ne 0 ]; then 
                                gh repo create $orgName/$repoConfig -y --public
                                gh repo clone $orgName/$repoConfig || echo checkout already exist
                                cp -r  charts/jenkins/VALUES_SUMMARY.md $repoConfig/VALUES_SUMMARY.md
                                sed  's/jenkins.example.com/${jenkinsUrl}/g'   charts/jenkins/values.yaml > $repoConfig/values.yaml
                                sed  's/TEAMNAME/${teamName}/g' onboard/Readme.md > $repoConfig/Readme.md
                                cd $repoConfig && \
                                git remote set-url origin $originUrl && \
                                git add Readme.md VALUES_SUMMARY.md values.yaml && \
                                git commit -m "updating config code" && \
                                git push -u origin master
                            else
                                echo Repo already exist
                                git remote add origin $originUrl
                                gh repo clone $orgName/$repoConfig
                            fi
                        """
                        }
                    }
                }
            }
        }
        stage("Cluster Auth") { 
            steps {
                script { 
                    container("gcloud-container") { 
                        withCredentials([file(credentialsId: 'gcloud-creds', variable: 'FILE')]) {
                        sh """
                            gcloud config set project vast-operator-277120
                            gcloud auth activate-service-account --key-file=$FILE
                            gcloud container clusters get-credentials ${cluster} --zone=${region}
                        """
                        }
                    }
                }
            }
        }
        stage("Install Jenkis") { 
            steps {
                script {                 
                    container("gcloud-container") { 
                        sh """
                            sed  's/NAMESPACE/${namespace}/g' onboard/namespace.yaml  > onboard/namespace-apply.yaml
                            sed  's/NAMESPACE/${namespace}/g' onboard/serviceaccount.yaml > onboard/serviceaccount-apply.yaml
                            
                            kubectl apply -f onboard/namespace-apply.yaml
                            kubectl apply -f onboard/serviceaccount-apply.yaml
                            kubectl config set-context --current --namespace=${namespace}
                            helm upgrade --install jenkins-${namespace} --values ${repoConfig}/values.yaml charts/jenkins/
                        """
                    }
                }
            }
        }
        stage("Email Details") { 
            steps {
                script {                 
                    echo "TODO: Email jenkins details to user"
                }
            }
        }
    }
    post {
        always {
            script {
                container("gcloud-container") { 
                sh """
                   rm -rf  /tmp/token.txt
                   echo github logout
                   # gh auth logout
                   # Logout gcloud
                """
                }
            }
        }
    }
}